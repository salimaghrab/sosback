import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

// @mui material components
import Grid from "@mui/material/Grid";
import Card from "@mui/material/Card";
import TextField from "@mui/material/TextField";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import Dialog from "@mui/material/Dialog";
import DialogTitle from "@mui/material/DialogTitle";
import DialogContent from "@mui/material/DialogContent";
import DialogActions from "@mui/material/DialogActions";
import Button from "@mui/material/Button";
import Alert from "@mui/material/Alert";
import Snackbar from "@mui/material/Snackbar";

// Material Dashboard 2 React components
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import MDButton from "components/MDButton";
import MDInput from "components/MDInput";

// Material Dashboard 2 React example components
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import apiClient from "layouts/authentication/services/axiosInterceptor";

function AddEmployee() {
  const navigate = useNavigate();

  // Employee form state
  const [employee, setEmployee] = useState({
    name: "",
    nationality: "",
    departmentId: "",
  });

  // Departments state
  const [departments, setDepartments] = useState([]);

  // Department dialog state
  const [departmentDialog, setDepartmentDialog] = useState(false);
  const [newDepartment, setNewDepartment] = useState("");

  // Loading and notification states
  const [loading, setLoading] = useState(false);
  const [departmentLoading, setDepartmentLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  // Form validation state
  const [errors, setErrors] = useState({});

  // Fetch departments on component mount
  useEffect(() => {
    fetchDepartments();
  }, []);

  const fetchDepartments = async () => {
    try {
      const response = await apiClient.get("/Department/all");
      setDepartments(response.data || []);
    } catch (error) {
      console.error("Error fetching departments:", error);
      showSnackbar("Error fetching departments", "error");
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEmployee((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const handleDepartmentChange = (e) => {
    setEmployee((prev) => ({
      ...prev,
      departmentId: e.target.value,
    }));

    if (errors.departmentId) {
      setErrors((prev) => ({
        ...prev,
        departmentId: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!employee.name.trim()) {
      newErrors.name = "Name is required";
    }

    if (!employee.nationality.trim()) {
      newErrors.nationality = "Nationality is required";
    }

    if (!employee.departmentId) {
      newErrors.departmentId = "Department is required";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setLoading(true);
    try {
      const employeeData = {
        id: "00000000-0000-0000-0000-000000000000", // Will be generated by backend
        name: employee.name.trim(),
        nationality: employee.nationality.trim(),
        departmentId: employee.departmentId,
      };

      await apiClient.post("/Employee/add", employeeData);

      showSnackbar("Employee added successfully!", "success");

      // Reset form
      setEmployee({
        name: "",
        nationality: "",
        departmentId: "",
      });

      // Navigate back to users page after a short delay
      setTimeout(() => {
        navigate("/users");
      }, 1500);
    } catch (error) {
      console.error("Error adding employee:", error);
      showSnackbar(error.response?.data?.message || "Error adding employee", "error");
    } finally {
      setLoading(false);
    }
  };

  const handleAddDepartment = async () => {
    if (!newDepartment.trim()) {
      return;
    }

    setDepartmentLoading(true);
    try {
      const departmentData = {
        id: "00000000-0000-0000-0000-000000000000", // Will be generated by backend
        typeDepartment: newDepartment.trim(),
      };

      await axios.post("https://localhost:7248/api/Department/add", departmentData);

      // Refresh departments list
      await fetchDepartments();

      showSnackbar("Department added successfully!", "success");
      setDepartmentDialog(false);
      setNewDepartment("");
    } catch (error) {
      console.error("Error adding department:", error);
      showSnackbar(error.response?.data?.message || "Error adding department", "error");
    } finally {
      setDepartmentLoading(false);
    }
  };

  const handleCancel = () => {
    navigate("/users");
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity,
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar((prev) => ({
      ...prev,
      open: false,
    }));
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox pt={6} pb={3}>
        <Grid container spacing={6} justifyContent="center">
          <Grid item xs={12} md={8} lg={6}>
            <Card>
              <MDBox
                mx={2}
                mt={-3}
                py={3}
                px={2}
                variant="gradient"
                bgColor="success"
                borderRadius="lg"
                coloredShadow="success"
              >
                <MDTypography variant="h6" color="white">
                  Add New Employee
                </MDTypography>
              </MDBox>

              <MDBox p={3}>
                <form onSubmit={handleSubmit}>
                  <Grid container spacing={3}>
                    {/* Name Field */}
                    <Grid item xs={12}>
                      <MDInput
                        fullWidth
                        label="Employee Name"
                        name="name"
                        value={employee.name}
                        onChange={handleInputChange}
                        error={!!errors.name}
                        helperText={errors.name}
                        required
                      />
                    </Grid>

                    {/* Nationality Field */}
                    <Grid item xs={12}>
                      <MDInput
                        fullWidth
                        label="Nationality"
                        name="nationality"
                        value={employee.nationality}
                        onChange={handleInputChange}
                        error={!!errors.nationality}
                        helperText={errors.nationality}
                        required
                      />
                    </Grid>

                    {/* Department Selection */}
                    <Grid item xs={12}>
                      <MDBox display="flex" alignItems="center" gap={2}>
                        <FormControl fullWidth error={!!errors.departmentId} sx={{ flex: 1 }}>
                          <InputLabel id="department-select-label">Department *</InputLabel>
                          <Select
                            labelId="department-select-label"
                            value={employee.departmentId}
                            onChange={handleDepartmentChange}
                            label="Department *"
                          >
                            {departments.map((dept) => (
                              <MenuItem key={dept.id} value={dept.id}>
                                {dept.typeDepartment}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>

                        <MDButton
                          variant="outlined"
                          color="info"
                          size="medium"
                          onClick={() => setDepartmentDialog(true)}
                          sx={{ minWidth: "auto", px: 2 }}
                        >
                          + Add Dept
                        </MDButton>
                      </MDBox>
                      {errors.departmentId && (
                        <MDTypography
                          variant="caption"
                          color="error"
                          sx={{ mt: 1, display: "block" }}
                        >
                          {errors.departmentId}
                        </MDTypography>
                      )}
                    </Grid>

                    {/* Action Buttons */}
                    <Grid item xs={12}>
                      <MDBox display="flex" justifyContent="space-between" mt={3}>
                        <MDButton variant="outlined" color="secondary" onClick={handleCancel}>
                          Cancel
                        </MDButton>

                        <MDButton
                          type="submit"
                          variant="gradient"
                          color="success"
                          disabled={loading}
                        >
                          {loading ? "Adding..." : "Add Employee"}
                        </MDButton>
                      </MDBox>
                    </Grid>
                  </Grid>
                </form>
              </MDBox>
            </Card>
          </Grid>
        </Grid>
      </MDBox>

      {/* Add Department Dialog */}
      <Dialog
        open={departmentDialog}
        onClose={() => setDepartmentDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Add New Department</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Department Name"
            fullWidth
            variant="outlined"
            value={newDepartment}
            onChange={(e) => setNewDepartment(e.target.value)}
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button
            onClick={() => {
              setDepartmentDialog(false);
              setNewDepartment("");
            }}
          >
            Cancel
          </Button>
          <Button
            onClick={handleAddDepartment}
            variant="contained"
            disabled={departmentLoading || !newDepartment.trim()}
          >
            {departmentLoading ? "Adding..." : "Add Department"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "top", horizontal: "right" }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: "100%" }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </DashboardLayout>
  );
}

export default AddEmployee;
